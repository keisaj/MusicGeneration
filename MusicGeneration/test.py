from music21 import *
import fractions

file = r'C:\Users\janbu\PycharmProjects\PracaMagisterska\MusicGeneration\DOS.mxl'


def get_notes(file) -> dict:
    """ Get all the notes and chords from the midi files in the ./midi_songs directory """

    midi = converter.parse(str(file))  # midi file converted to notes stream
    print("Parsing %s" % file)

    parts = []

    for part in midi.parts:
        parts.append(part)

    notes_to_parse = {f'{idx}': part for idx, part in enumerate(parts)}

    notes = {f'{idx}': [] for idx in range(len(notes_to_parse.values()))}

    for idx, part in enumerate(notes_to_parse.values()):
        for element in part.recurse():
            if isinstance(element, note.Note):
                notes[f'{idx}'].append([str(element.pitch), element.duration.quarterLength])
            elif isinstance(element, chord.Chord):
                notes[f'{idx}'].append(
                    ['.'.join(str(n) for n in element.pitches), element.duration.quarterLength])
            elif isinstance(element, note.Rest):
                notes[f'{idx}'].append([element.name, element.duration.quarterLength])

    return notes


def create_midi(prediction_output: dict):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """

    midi_stream = stream.Score()
    # create note and chord objects based on the values generated by the model
    for idx, part in enumerate(prediction_output.values()):

        p = stream.Part(id=f'part{idx}')

        for element, element_duration in part:

            d = duration.Duration()
            d.quarterLength = element_duration
            # element is a chord
            if ('.' in element) or element.isdigit():
                notes_in_chord = element.split('.')
                notes = []
                for current_note in notes_in_chord:
                    new_note = note.Note(current_note)
                    new_note.storedInstrument = instrument.Piano()
                    notes.append(new_note)
                new_element = chord.Chord(notes)
                new_element.duration = d

            # element is a rest
            elif element == 'rest':
                new_element = note.Rest(element)
                new_element.duration = d
                new_element.storedInstrument = instrument.Piano()

            # element is a note
            else:
                new_element = note.Note(element)
                new_element.duration = d
                new_element.storedInstrument = instrument.Piano()

            p.append(new_element)

        midi_stream.insert(0, p)

    midi_stream.write('midi', fp='test.mid')


notes = get_notes(file)
create_midi(prediction_output=notes)
print(notes)
